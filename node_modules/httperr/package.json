{
  "name": "httperr",
  "version": "0.5.0",
  "author": {
    "name": "Alan Plum",
    "email": "me@pluma.io"
  },
  "description": "HTTP status codes as JavaScript errors.",
  "licenses": {
    "type": "UNLICENSE",
    "url": "https://github.com/pluma/httperr/blob/master/UNLICENSE"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/pluma/httperr.git"
  },
  "keywords": [
    "http",
    "errors",
    "error",
    "request",
    "response",
    "errorclass"
  ],
  "dependencies": {},
  "devDependencies": {
    "mocha": "~1.17",
    "expect.js": "~0.2",
    "jshint": "~2.4",
    "istanbul": "~0.2",
    "coveralls": "~2.6",
    "rewire": "~2.0"
  },
  "main": "index.js",
  "scripts": {
    "test": "make test",
    "coveralls": "make coveralls"
  },
  "engines": {
    "node": ">=0.6"
  },
  "readme": "# Synopsis\n\n**httperr** provides Error types for all HTTP error status codes.\n\n[![stability 3 - stable](http://b.repl.ca/v1/stability-3_--_stable-yellowgreen.png)\n](http://nodejs.org/api/documentation.html#documentation_stability_index) [![license - Unlicense](http://b.repl.ca/v1/license-Unlicense-lightgrey.png)](http://unlicense.org/) [![Flattr this](https://api.flattr.com/button/flattr-badge-large.png)](https://flattr.com/submit/auto?user_id=pluma&url=https://github.com/pluma/httperr)\n\n[![Build Status](https://travis-ci.org/pluma/httperr.png?branch=master)](https://travis-ci.org/pluma/httperr) [![Coverage Status](https://coveralls.io/repos/pluma/httperr/badge.png?branch=master)](https://coveralls.io/r/pluma/httperr?branch=master) [![Dependencies](https://david-dm.org/pluma/httperr.png?theme=shields.io)](https://david-dm.org/pluma/httperr)\n\n[![NPM status](https://nodei.co/npm/httperr.png?compact=true)](https://npmjs.org/package/httperr)\n\n# Why?\n\nThere are several libraries that already do this, but most of them either only support a very limited number of status codes, don't capture stack traces correctly or are no longer maintained.\n\nThe biggest difference in **httperr** is that it lets you attach relevant information for the error in a single function call, allowing you to separate your error handling and error response logic without losing the semantics of HTTP status codes.\n\n# Install\n\n## With NPM\n\n```sh\nnpm install httperr\n```\n\n## From source\n\n```sh\ngit clone https://github.com/pluma/httperr.git\ncd httperr\nnpm install\n```\n\n# Basic usage example\n\n```javascript\nvar httperr = require('httperr');\n\nvar err = httperr[404]('The path \"/example\" could not be resolved');\nconsole.log(err);\n/*\n{ [NotFound: The path \"/example\" could not be resolved]\n  title: 'Not Found',\n  name: 'NotFound',\n  code: 'NOT_FOUND',\n  statusCode: 404,\n  message: 'The path \"/example\" could not be resolved'\n}\n*/\nthrow err;\n/*\nNotFound: The path \"/example\" could not be resolved\n    at ...\n*/\n\nconsole.log(httperr.methodNotAllowed({allowed: ['GET', 'POST']}));\n/*\n{ [MethodNotAllowed]\n  title: 'Method Not Allowed',\n  name: 'MethodNotAllowed',\n  code: 'METHOD_NOT_ALLOWED',\n  statusCode: 405,\n  message: '',\n  allowed: ['GET', 'POST']\n}\n*/\n\nerr = new httperr.NotFound();\nconsole.log(err);\n/*\n{ [NotFound]\n  title: 'Not Found',\n  name: 'NotFound',\n  code: 'NOT_FOUND',\n  statusCode: 404,\n  message: 'The path \"/example\" could not be resolved'\n}\n*/\n\nconsole.log(err instanceof httperr.NotFound); // true\nconsole.log(err instanceof httperr.notFound); // true\nconsole.log(err instanceof httperr['404']); // true\nconsole.log(err instanceof httperr.MethodNotAllowed); // false\nconsole.log(err instanceof httperr.HttpError); // true\nconsole.log(err instanceof Error); // true\n```\n\n# API\n\n## new httperr.{ErrorName}([config:Object]):Error\n\nCreates an Error object. The `new` keyword is optional.\n\nExample:\n\n```javascript\nnew httperr.NotFound({message: 'That does not exist'});\n```\n\nIf `config` is a string, it will be treated as `config.message`.\n\nIf `config` is an `Error` object, it will be treated as `config.cause`.\n\nIf `config` is an object, it can have the following properties:\n\n### config.message (optional)\nA descriptive human-readable title describing the error's cause.\n\n### config.cause (optional)\nThe underlying exception that caused the HTTP error.\n\n### config.details (optional)\nA detailed human-readable description of the error's cause and possible solutions.\n\n### config.allowed (optional)\nThe methods allowed for this URL.\n\nThis property is only available for `405 Method Not Allowed` errors and can be used to populate the `Allow` header.\n\n### config.retryAfter (optional)\nThe minimum delay before the request should be attempted again.\n\nThis property is only available for `429 Too Many Requests` and `420 Enhance Your Calm` (Twitter API) errors and can be used to populate the `Retry-After` header.\n\n### config.parameters (optional)\nThe parameters with which the request should be retried.\n\nThis property is only available for `449 Retry With` (Microsoft) errors and can be used to populate the response status message.\n\n### config.location (optional)\nThe location for which the request should be repeated.\n\nThis property is only available for `451 Redirect` (Microsoft) errors and can be used to populate the proprietary `X-MS-Location` response header.\n\n## httperr.{statusCode}(config:Object):Error\n\nSee above.\n\nExample:\n\n```javascript\nhttperr[404]({message: 'That does not exist either'});\n```\n\n## httperr.{errorName}([config:Object]):Error\n\nSee above.\n\nExample:\n\n```javascript\nhttperr.notFound({message: 'This link is dead, too'})\n```\n\n## httperr.createHttpError(status, title, [init]):Function\nCreates a new error type for the given HTTP error status.\n\nTakes the following arguments:\n\n### title\nA human-readable title for the HTTP error.\n\n### status\nThe HTTP response status code for the HTTP error.\n\n### init (optional)\nA function which will be invoked as a method of the new error with the `config` argument immediately after the error is created by the factory. Can be used to process additional error-specific configuration parameters.\n\n## new httperr.HttpError(config)\n\nThe base type for all `httperr` error types. You probably don't want to use this directly.\n\n# Unlicense\n\nThis is free and unencumbered public domain software. For more information, see http://unlicense.org/ or the accompanying [UNLICENSE](https://github.com/pluma/httperr/blob/master/UNLICENSE) file.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/pluma/httperr/issues"
  },
  "homepage": "https://github.com/pluma/httperr",
  "_id": "httperr@0.5.0",
  "_shasum": "fdd7d4ee22db0ab5ddb68ce286dea40038114853",
  "_from": "httperr@",
  "_resolved": "https://registry.npmjs.org/httperr/-/httperr-0.5.0.tgz"
}
